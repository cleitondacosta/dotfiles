#!/usr/bin/env bash

ROFI_SELECT_OPTION_THEME="$HOME/.include/rofi-themes/option-list-theme.rasi"
ROFI_INPUT_THEME="$HOME/.include/rofi-themes/input-theme.rasi"
LOCK_FILE="/tmp/.screencasting-lock.pid"

SCREENCASTING_SCRIPTS_DIRECTORY="$HOME/.include/scripts/screencast"

stop_already_running_recording() {
    if [ -e "$LOCK_FILE" ]; then
        PROCESS_PID=$(cat "$LOCK_FILE") 
        pkill -P $PROCESS_PID
        rm "$LOCK_FILE"
        exit 0
    fi
}

ask_user_to_select_screencast_method() {
    echo "$(ls "$SCREENCASTING_SCRIPTS_DIRECTORY"\
            | rofi -dmenu -theme "$ROFI_SELECT_OPTION_THEME"\
            -p "Select an option to record your screen")"
}

ask_monitor() {
    OPTIONS="$(echo "${@}" | tr ' ' '\n')"

    echo "$(echo "$OPTIONS" | rofi -dmenu -theme "$ROFI_SELECT_OPTION_THEME"\
            -p "Select which monitor to record")"
}

ask_filename() {
    echo "$(rofi -theme "$ROFI_INPUT_THEME" -dmenu -p "File name: ")"
}

format_filename() {
    FILE_NAME="$1"
    DIR="$HOME/video/capture"
    FORMATTED_FILE_NAME="$DIR/$FILE_NAME.mp4"
    N=2

    [[ ! -e "$DIR" ]] && mkdir -p "$DIR"

    while [ -e "$FORMATTED_FILE_NAME" ]; do
        FORMATTED_FILE_NAME="$DIR/$FILE_NAME($N).mp4"
        N=$((N+1))
    done

    echo "$FORMATTED_FILE_NAME"
}

stop_already_running_recording

NUMBER_OF_CONNECTED_MONITORS=$(xrandr | grep ' connected' | wc -l)

if [ $NUMBER_OF_CONNECTED_MONITORS -gt 1 ]; then
    declare -a MONITORS

    i=0
    while [ $i -lt $NUMBER_OF_CONNECTED_MONITORS ]; do
        MONITORS[$i]=$((i+1))
        i=$((i+1))
    done

    CHOOSEN_MONITOR_TO_RECORD="$(ask_monitor ${MONITORS[*]})"
    [[ -z $CHOOSEN_MONITOR_TO_RECORD ]] && exit

    MONITOR_RESOLUTION="$(\
        xrandr \
        | grep -E '\sconnected' \
        | sed -n ${CHOOSEN_MONITOR_TO_RECORD}p \
        | grep -Eo '[0-9]+x[0-9]+' \
    )"

    MONITOR_OFFSET="$(\
        xrandr \
        | grep -E '\sconnected' \
        | sed -n ${CHOOSEN_MONITOR_TO_RECORD}p \
        | grep -Eo '[0-9]+\+[0-9]+\s' \
        | tr '+' ','
    )"
else
    MONITOR_RESOLUTION="$(xdpyinfo | grep dimensions | awk '{print $2}')"
    MONITOR_OFFSET="0,0"
fi

SELECTED_SCRIPT="$(ask_user_to_select_screencast_method)"

[[ -z $SELECTED_SCRIPT ]] && exit

SELECTED_SCRIPT="$SCREENCASTING_SCRIPTS_DIRECTORY/$SELECTED_SCRIPT"

FILE_NAME="$(ask_filename)"
[[ -z $FILE_NAME ]] && exit

FILE_NAME="$(format_filename "$FILE_NAME")"

$SELECTED_SCRIPT "$FILE_NAME" 60 "$MONITOR_RESOLUTION" "$MONITOR_OFFSET" &

RECORDING_APP_PID=$!

echo $RECORDING_APP_PID > "$LOCK_FILE"

wait $RECORDING_APP_PID

rm "$LOCK_FILE"

if [ -f "$FILE_NAME" ]; then
    notify-send "Capture" "$FILE_NAME"
else
    notify-send -u critical "Capture error" "Couldn't capture"
fi
