#!/usr/bin/env bash
#
# Description: 
# Uses rofi to ask the user for an screencast option, and then
# record it with ffmpeg.
#

rec_with_sound() {
    CAPTURE_FILE="$1"
    FRAME_RATE=$2
    SCREEN_RESOLUTION="$3"
    OFFSET="$4"

    ffmpeg \
        -probesize 10M \
        -y \
        -f x11grab \
        -thread_queue_size 512 \
        -s "$SCREEN_RESOLUTION" \
        -r $FRAME_RATE \
        -i :0.0+$OFFSET \
        -f pulse -ac 2 -i default \
        -c:v libx264rgb \
        -crf 0 \
        -preset ultrafast \
        "$CAPTURE_FILE"
}

rec_without_sound() {
    CAPTURE_FILE="$1"
    FRAME_RATE=$2
    SCREEN_RESOLUTION="$3"
    OFFSET="$4"

    ffmpeg \
        -probesize 10M \
        -y \
        -f x11grab \
        -thread_queue_size 512 \
        -s "$SCREEN_RESOLUTION" \
        -r $FRAME_RATE \
        -i :0.0+$OFFSET \
        -c:v libx264rgb \
        -crf 0 \
        -preset ultrafast \
        "$CAPTURE_FILE"
}

rec_whats_compliant() {
    CAPTURE_FILE="$1"
    FRAME_RATE=$2
    SCREEN_RESOLUTION="$3"
    OFFSET="$4"

    ffmpeg \
        -probesize 10M \
        -y \
        -f x11grab \
        -thread_queue_size 512 \
        -s "$SCREEN_RESOLUTION" \
        -r $FRAME_RATE \
        -i :0.0+$OFFSET \
        -f pulse -ac 2 -i default \
        -c:v libx264 \
        -preset fast \
        -profile:v baseline \
        -level 3.0 \
        -pix_fmt yuv420p \
        "$CAPTURE_FILE"
}

rec_whats_compliant_without_sound() {
    CAPTURE_FILE="$1"
    FRAME_RATE=$2
    SCREEN_RESOLUTION="$3"
    OFFSET="$4"

    ffmpeg \
        -probesize 10M \
        -y \
        -f x11grab \
        -thread_queue_size 512 \
        -s "$SCREEN_RESOLUTION" \
        -r $FRAME_RATE \
        -i :0.0+$OFFSET \
        -c:v libx264 \
        -preset fast \
        -profile:v baseline \
        -level 3.0 \
        -pix_fmt yuv420p \
        "$CAPTURE_FILE"
}

ask_option() {
    OPTIONS="$(echo "$@" | tr ' ' '\n')"
    ROFI_THEME="$HOME/.config/rofi/option-list-theme.rasi"
    echo "$(echo "$OPTIONS" | rofi -dmenu\
           -p "Select an option to record your screen")"
}

ask_filename() {
    ROFI_THEME=~/.config/rofi/type-theme.rasi
    echo "$(rofi -dmenu -p "File name: ")"
}

format_filename() {
    FILE_NAME="$1"
    DIR="$HOME/video/capture"
    FORMATTED_FILE_NAME="$DIR/$FILE_NAME.mp4"
    N=2

    [[ ! -e "$DIR" ]] && mkdir -p "$DIR"

    while [ -e "$FORMATTED_FILE_NAME" ]; do
        FORMATTED_FILE_NAME="$DIR/$FILE_NAME($N).mp4"
        N=$((N+1))
    done

    echo "$FORMATTED_FILE_NAME"
}

NUMBER_OF_CONNECTED_MONITORS=$(xrandr | grep ' connected' | wc -l)

if [ $NUMBER_OF_CONNECTED_MONITORS -gt 1 ]; then
    declare -a MONITORS

    i=0
    while [ $i -lt $NUMBER_OF_CONNECTED_MONITORS ]; do
        MONITORS[$i]=$((i+1))
        i=$((i+1))
    done

    CHOOSEN_MONITOR_TO_RECORD="$(ask_option ${MONITORS[*]})"
    [[ -z $CHOOSEN_MONITOR_TO_RECORD ]] && exit

    MONITOR_RESOLUTION="$(\
        xrandr \
        | grep -E '\sconnected' \
        | sed -n ${CHOOSEN_MONITOR_TO_RECORD}p \
        | grep -Eo '[0-9]+x[0-9]+' \
    )"

    MONITOR_OFFSET="$(\
        xrandr \
        | grep -E '\sconnected' \
        | sed -n ${CHOOSEN_MONITOR_TO_RECORD}p \
        | grep -Eo '[0-9]+\+[0-9]+\s' \
        | tr '+' ','
    )"
else
    MONITOR_RESOLUTION="$(xdpyinfo | grep dimensions | awk '{print $2}')"
    MONITOR_OFFSET="0,0"
fi

OPTION="$(ask_option\
    "rec"\
    "rec-without-sound"\
    "rec-whats"\
    "rec-whats-without-sound"\
)"

[[ -z $OPTION ]] && exit

FILE_NAME="$(ask_filename)"
[[ -z $FILE_NAME ]] && exit

FILE_NAME="$(format_filename "$FILE_NAME")"

case "$OPTION" in
    rec) 
        rec_with_sound "$FILE_NAME" 60 "$MONITOR_RESOLUTION" "$MONITOR_OFFSET"
        ;;

    rec-without-sound) 
        rec_without_sound "$FILE_NAME" 60 "$MONITOR_RESOLUTION" "$MONITOR_OFFSET"
        ;;

    rec-whats) 
        rec_whats_compliant "$FILE_NAME" 60 "$MONITOR_RESOLUTION" "$MONITOR_OFFSET"
        ;;

    rec-whats-without-sound) 
        rec_whats_compliant_without_sound "$FILE_NAME" 60 "$MONITOR_RESOLUTION" "$MONITOR_OFFSET"
        ;;
esac

if [ -f "$FILE_NAME" ]; then
    notify-send "Capture" "$FILE_NAME"
else
    notify-send -u critical "Capture error" "Couldn't capture"
fi
