(include "./ui-widgets/all.yuck")
(include "./widgets/all.yuck")

(defwindow main
  :monitor 0
  :stacking "bg"
  :windowtype "dock"
  :wm-ignore false
  :geometry (
    geometry
      :width "100%"
      :height: 30
      :anchor "center top"
  )

  (_root_widget)
)

(defwindow secondary
  :monitor 1
  :stacking "fg"
  :windowtype "dock"
  :wm-ignore false
  :geometry (geometry :anchor "center top" :width "100%")

  (box :class "root panel"
    (I3Workspaces :workspaces secondaryWorkspaces)
  )
)

(defwindow vpn :monitor 0 :wm-ignore true :geometry (geometry :y "-3px" :x "-5px" :width 35 :height 35 :anchor "bottom right")
  (label :class "vpn-icon" :text "üëÅÔ∏è")
)

(defwindow vpn2 :monitor 1 :wm-ignore true :geometry (geometry :y "-3px" :x "-5px" :width 35 :height 35 :anchor "bottom right")
  (label :class "vpn-icon" :text "üëÅÔ∏è")
)

(defpoll sound_volume :interval "1s" :initial 0
   `
     pactl get-sink-volume @DEFAULT_SINK@\
     | head -1\
     | awk 'NR==1 gsub("%", ""); {print $5}'
   `
)

(defpoll mic_volume :interval "1s" :initial 0
  `bash ~/.scripts/eww/get-microphone-level.sh`
)

(defpoll gpu_temp :interval "5s"
  `nvidia-smi --query-gpu=temperature.gpu --format=csv,noheader,nounits`
)

(defpoll gpu_usage :interval "5s"
  `nvidia-smi --query-gpu=utilization.gpu --format=csv,noheader,nounits`
)

(defpoll gpu_power_draw :interval "5s" :initial 0
  `nvidia-smi --query-gpu=power.draw --format=csv,noheader,nounits`
)

(defpoll vpn :interval "3s"
  `bash ~/.scripts/eww/vpn.sh`
)

(defvar isVpnActive false)
(defvar mainWorkspaces "[1, 3, 5, 7, 9, \"üóø\"]")
(defvar secondaryWorkspaces "[2, 4, 6, 8, 0, \"üóø\"]")


(defwidget _root_widget []
  (box
    :class "panel root"
    :space-evenly false
    :orientation "h"

    (I3Workspaces :workspaces mainWorkspaces)
    (Spacer)
    (_hardware_stat)
    (Pomodoro)
    (InternetConnectionChecker)
    (Icon :icon vpn)
    (AudioControls)
    (Time)
    (Screencasting)
  )
)

(defwidget AudioControls []
  (box
    :space-evenly false
    
    (bar
      :text {sound_volume == 0 ? "ÔÄ¶" : sound_volume < 33 ? "ÔÄß" : "ÔÄ®"}
      :value sound_volume
      :onchange `pactl set-sink-volume @DEFAULT_SINK@ {}%`
    )

    (bar
      :text {mic_volume == 0 ? "Û∞ç≠" : "Û∞ç¨"}
      :value mic_volume
      :onchange `bash ~/.scripts/eww/set-microphone-level.sh {}%`
    )
  )
)

(defwidget _hardware_stat []
  (box
    :space-evenly false
    :valign "end"

    (group :text "CPU" :class "cpu"
      (sysinfo :text "CPU" :value {round(EWW_CPU.avg, 1)} :unitType "%")
      (sysinfo :text "TEMP" :value {round(EWW_TEMPS["K10TEMP_TCTL"], 0)} :unitType "¬∞")
    )

    (group :text "GPU" :class "gpu"
      (sysinfo :text "GPU" :value {gpu_usage} :unitType "%")
      (sysinfo :text "TEMP" :value {gpu_temp} :unitType "¬∞")
      (sysinfo :text "VOLT" :value {round(gpu_power_draw, 0)} :unitType "w")
    )

    (group :text "RAM" :class "ram"
      (sysinfo
        :text "RAM"
        :value {round(EWW_RAM.used_mem / EWW_RAM.total_mem * 100, 0)}
        :unitType "%"
      )
    )

    (group :text "DISK" :class "disk"
      (sysinfo
        :text "DISK"
        :value {round(EWW_DISK["/"].used / EWW_DISK["/"].total * 100, 0)}
        :unitType "%"
      )
    )
  )
)

(defwidget Time []
  (box :class "time"
    (label :text {formattime(EWW_TIME, "%H:%M:%S   %d/%m/%Y")})
  )
)
