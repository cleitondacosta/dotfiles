(include "./widgets/widgets.yuck")

(defpoll is_screencasting :interval "1s"
  `[[ -f "/tmp/.screencasting-lock.pid" ]] && echo "true" || echo ""`
)

(defpoll sound_volume :interval "1s"
   `
     pactl get-sink-volume @DEFAULT_SINK@\
     | head -1\
     | awk 'NR==1 gsub("%", ""); {print $5}'
   `
)

(defpoll mic_volume :interval "1s"
  `bash ~/.scripts/eww/get-microphone-level.sh`
)

(defpoll gpu_temp :interval "5s"
  `nvidia-smi --query-gpu=temperature.gpu --format=csv,noheader,nounits`
)

(defpoll gpu_usage :interval "5s"
  `nvidia-smi --query-gpu=utilization.gpu --format=csv,noheader,nounits`
)

(defpoll gpu_power_draw :interval "5s"
  `nvidia-smi --query-gpu=power.draw --format=csv,noheader,nounits`
)

(defpoll time :interval "1s"
  `date +'{"hour":"%H", "min": "%M", "sec": "%S"}'`
)

(defpoll date :interval "1s"
  `date +'{"day":"%d", "month": "%m", "year": "%y"}'`
)

(defpoll vpn :interval "1s"
  `bash ~/.scripts/eww/vpn.sh`
)

(defwindow main
  :stacking "fg"
  :windowtype "dock"
  :wm-ignore false
  :geometry (
    geometry
      :width "100%"
      :height "10"
      :anchor "center bottom"
  )

  (_root_widget)
)

(defwidget _root_widget []
  (box
    :class "root"
    :space-evenly false
    :orientation "h"
    :halign true

    (_hardware_stat)
    (_spacer)
    (_network)
    (_audio_controls)
    (_time)
    (_is_screencasting)
  )
)

(defwidget _audio_controls []
  (box
    :space-evenly false
    
    (bar
      :text {sound_volume == 0 ? "" : sound_volume < 33 ? "" : ""}
      :value sound_volume
      :onchange `pactl set-sink-volume @DEFAULT_SINK@ {}%`
    )

    (bar
      :text {mic_volume == 0 ? "󰍭" : "󰍬"}
      :value mic_volume
      :onchange `bash ~/.scripts/eww/set-microphone-level.sh {}%`
    )
  )
)

(defwidget _hardware_stat []
  (box
    :space-evenly false
    :valign "end"

    (group :text "CPU" :class "cpu"
      (sysinfo :text "CPU" :value {round(EWW_CPU.avg, 1)} :unitType "%")
      (sysinfo :text "TEMP" :value {round(EWW_TEMPS["K10TEMP_TCTL"], 0)} :unitType "°")
    )

    (group :text "GPU" :class "gpu"
      (sysinfo :text "GPU" :value {gpu_usage} :unitType "%")
      (sysinfo :text "TEMP" :value {gpu_temp} :unitType "°")
      (sysinfo :text "VOLT" :value {round(gpu_power_draw, 0)} :unitType "w")
    )

    (group :text "RAM" :class "ram"
      (sysinfo
        :text "RAM"
        :value {round(EWW_RAM.used_mem / EWW_RAM.total_mem * 100, 0)}
        :unitType "%"
      )
    )

    (group :text "DISK" :class "disk"
      (sysinfo
        :text "DISK"
        :value {round(EWW_DISK["/"].used / EWW_DISK["/"].total* 100, 0)}
        :unitType "%"
      )
    )
  )
)

(defwidget _time []
  (box
    :class "time"
    :space-evenly false
    :orientation "h"
    :halign true
    :valign true
    :spacing 16

    (label :text "${time.hour}:${time.min}:${time.sec}")
    (label :text "${date.day}/${date.month}/${date.year}")
  )
)

(defwidget _is_screencasting []
  (overlay

    (label :class "dummy" :text {is_screencasting == true ? "	" : ""})

    (transform
      :translate-y "-8px"
      :translate-x "-12px"

      (label
        :class {is_screencasting == "true" ? "rec-icon" : ""}
        :text {is_screencasting == "true" ? "󰑋" : ""}
      )
    )
  )
)

(defwidget _network []
  (box
    :class "network"

    (overlay
      (label :class "dummy" :text "	")

      (transform
        :translate-y "-3px"

        (label :class "vpn" :text vpn)
      )
    )
  )
)

(defwidget _spacer []
  (box :hexpand true) 
)
