(defvar circular_progress_size 35)

(defpoll sound_volume :interval "1s"
   `
     pactl get-sink-volume @DEFAULT_SINK@\
     | head -1\
     | awk 'NR==1 gsub("%", ""); {print $5}'
   `
)

(defpoll mic_volume :interval "1s"
  `bash ~/.scripts/eww/get-microphone-level.sh`
)

(defpoll gputemp :interval "5s"
  `nvidia-smi --query-gpu=temperature.gpu --format=csv,noheader,nounits`
)

(defpoll gpu_usage :interval "5s"
  `nvidia-smi --query-gpu=utilization.gpu --format=csv,noheader,nounits`
)

(defpoll gpu_power_draw :interval "5s"
  `nvidia-smi --query-gpu=power.draw --format=csv,noheader,nounits`
)

(defpoll time :interval "1s"
  `date +'{"hour":"%H", "min": "%M", "sec": "%S"}'`
)

(defpoll date :interval "1s"
  `date +'{"day":"%d", "month": "%m", "year": "%y"}'`
)

(defpoll vpn :interval "1s"
  `bash ~/.scripts/eww/vpn.sh`
)

(defwindow main
  :stacking "fg"
  :windowtype "dock"
  :wm-ignore true
  :geometry (
    geometry
      :width "100%"
      :height "4%"
      :anchor "center bottom"
    )

  (_root_widget)
)

(defwidget _root_widget []
  (box
    :class "root"
    :space-evenly false
    :orientation "h"
    :halign true

    (_hardware_stat)
    (_spacer)
    (_network)
    (_audio_controls)
    (_time)
  )
)

(defwidget _config []
  (box
    :orientation "h"
  )
)

(defwidget _audio_controls []
  (box
    :space-evenly false
    
    (_audio_sound)
    (_audio_mic)
  )
)

(defwidget _audio_sound []
  (box
    :space-evenly false
    :class "slider"

    (label :class "icon" :text {
      sound_volume == 0 ? "" :
        sound_volume < 33 ? "" :
          ""
    })

    (scale 
      :value sound_volume
      :min 0
      :max 100
      :orientation "h"
      :onchange `pactl set-sink-volume @DEFAULT_SINK@ {}%`
    )
  )
)

(defwidget _audio_mic []
  (box
    :space-evenly false
    :class "slider"

    (label :class "icon" :text {mic_volume == 0 ? "󰍭" : "󰍬"})


    (scale 
      :value mic_volume
      :min 0
      :max 100
      :orientation "h"
      :onchange `bash ~/.scripts/eww/set-microphone-level.sh {}%`
    )
  )
)

(defwidget _hardware_stat []
  (box
    :class "hardware-stat"
    :space-evenly false
    :valign "center"
    :spacing 8

    (box
      :class "cpu-info"
      :orientation "h"
      :space-evenly false
      :spacing 6

      (sysprogress
        :tip "CPU ${round(EWW_CPU.avg,0)}%"
        :data {EWW_CPU.avg}
        :icon "﬙"
        :size circular_progress_size
      )

      (sysprogress
        :css "temp"
        :tip "Temperature: ${EWW_TEMPS["K10TEMP_TCTL"]}°"
        :data {EWW_TEMPS["K10TEMP_TCTL"]}
        :icon ""
        :size circular_progress_size
      )
    )

    (box
      :class "gpu"
      :orientation "h"
      :spacing 4
      :halign true

      (sysprogress
        :css "temp"
        :tip "Temperature: ${gputemp}"
        :data gputemp
        :icon ""
        :size circular_progress_size
      )

      (sysprogress
        :css "gpu-usage"
        :tip "Usage: ${gpu_usage}%"
        :data gpu_usage
        :icon "﬙"
        :size circular_progress_size
      )

      (sysprogress
        :css "gpu-power-draw"
        :tip "Power draw: ${gpu_power_draw}"
        :data gpu_power_draw
        :icon "󱐋"
        :size circular_progress_size
      )
    )

    (box
      :class "ram"
      
      (sysprogress
        :css "ram"
        :tip "RAM ${round(EWW_RAM.used_mem / EWW_RAM.total_mem * 100, 0)}%"
        :data {EWW_RAM.used_mem / EWW_RAM.total_mem * 100}
        :icon "󰧑"
        :size circular_progress_size
      )
    )

    (box
      :class "disk"

      (sysprogress
        :css "disk"
        :tip "DISK ${round(EWW_DISK["/"].used / EWW_DISK["/"].total* 100, 0)}%"
        :data {EWW_DISK["/"].used / EWW_DISK["/"].total* 100}
        :icon "󰋊"
        :size circular_progress_size
      )
    )
  )
)

(defwidget _time []
  (box
    :class "time"
    :space-evenly false
    :orientation "v"
    :halign true
    :valign true

    (label :text "${time.hour}:${time.min}:${time.sec}")
    (label :text "${date.day}/${date.month}/${date.year}")
  )
)

(defwidget _network []
  (box
    :class 'network'
    :hcenter true
    :vcenter true
    (button
      :vexpand false
      :vexpand false
      :onclick {
        vpn == "󰱟"
        ? `nmcli connection up VPN_AD_marlinvpn2 \
           || notify-send "Could not connect to VPN." \
                          "Check your internet connection."`
        : `nmcli connection down VPN_AD_marlinvpn2 \
           && notify-send "Open VPN" \
                          "Disconnected from VPN_AD_marlinvpn2"`
      }

      (image
        :path {
          vpn == "󰱟"
          ? "/home/cleiton/liberdade/images/eww/openvpn-off.png"
          : "/home/cleiton/liberdade/images/eww/openvpn-on.png"
        }
        :image-width 20
        :image-height 20
      )
    )
  )
)

(defwidget sysprogress [data icon tip size]
  (box 
    :height size
    :width size
    :spalce-evenly false

    (circular-progress
      :value data
      :start-at 25
      :clockwise true
      :thickness 4
      :tooltip tip
      :spalce-evenly false

      (overlay
        :valign "center"
        :halign "center"
        :spalce-evenly false

        (box
          :orientation "h"
          :valign "center"
 
          (label :class "icon" :text icon)
          ;(label :text "${round(data, 0)}%")
        )
      )
    )
  )
)

(defwidget _spacer []
  (box :hexpand true) 
)
